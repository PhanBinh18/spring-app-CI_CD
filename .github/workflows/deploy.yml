name: Java CI/CD with Docker

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Docker image
      run: |
        docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
      env:
        DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Kéo (pull) image mới nhất từ Docker Hub về server
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
            
            # Dừng container cũ đang chạy (nếu có)
            # Dùng '|| true' để lệnh không báo lỗi nếu container chưa tồn tại
            docker stop demo1-app-container || true
            
            # Xóa container cũ (nếu có)
            docker rm demo1-app-container || true
            
            # Chạy container mới từ image vừa kéo về
            # Đổi -p 8080:8080 thành cổng phù hợp với ứng dụng của bạn
            docker run -d --name demo1-app-container -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
