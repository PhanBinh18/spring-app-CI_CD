name: Java CI/CD with Docker

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
      env:
        DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Đăng nhập vào Docker Hub trên server (quan trọng nếu image là private)
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Kéo image mới nhất từ Docker Hub về server
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
            
            # Dừng và xóa container cũ nếu đang chạy
            # Dùng '|| true' để lệnh không báo lỗi nếu container chưa tồn tại
            docker stop spring-app-container || true
            docker rm spring-app-container || true
            
            # Chạy container mới từ image vừa kéo về
            # Truyền các biến môi trường kết nối tới AWS DB vào container
            docker run -d \
              --name spring-app-container \
              -p 30120:8080 \
              -e SPRING_DATASOURCE_URL=${{ secrets.AWS_DB_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.AWS_DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.AWS_DB_PASSWORD }} \
              -e SPRING_PROFILES_ACTIVE=production \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/demo1-app:${{ github.sha }}
            
            # (Tùy chọn) Xóa các image cũ không còn được sử dụng để dọn dẹp
            docker image prune -f
